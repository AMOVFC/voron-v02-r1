#####################################################################
# Macros
#####################################################################
[gcode_macro PRINT_START]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    {% set CHAMBER_TEMPERATURE = params.CHAMBER_TEMPERATURE|default(0)|float %}
    {% set PREHEAT_TEMP = params.PREHEAT_TEMP|default(180)|float %}
    {% set WAIT_TIME = params.WAIT_TIME|default(360)|float %}

    M117 Starting print: preheating...
    M104 S{PREHEAT_TEMP}
    M140 S{BED_TEMP}

    G28                              ; Home all axes
    G90                              ; Absolute positioning
    G0 Z40 F600                      ; Raise Z for clearance

    M117 Preheating bed and chamber...
    {% if CHAMBER_TEMPERATURE > 0 %}
      CHAMBER_FANS_ON TARGET={CHAMBER_TEMPERATURE}
    {% endif %}

    G4 P{WAIT_TIME}                 ; Wait time before full heatup

    M117 Switching to print temperatures...
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}

    M117 Purging nozzle...
    G0 X0 Y0 Z10 F3600              ; Park nozzle
    G91                             ; Relative positioning
    LINE_PURGE

    M117 Print start complete


[gcode_macro dry_START]   
gcode:
    PRINT_START BED_TEMP=50 EXTRUDER_TEMP=100 PREHEAT_TEMP=75 WAIT_TIME=60


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # PAUSE_TUNE
  {% set z = params.Z|default(30)|int %}                                                   ; z hop amount 30mm
  {% if printer['pause_resume'].is_paused|int == 0 %}
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hot temp variable for reference in resume macro
      SAVE_GCODE_STATE NAME=PAUSE                                                          ; save the current print position for resume, before z-hop
      BASE_PAUSE                                                                           ; pause print
      G91                                                                           
      {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
          G1 E-2 F2700                                                                     ; Retract 2mm
          G1 X3 Y3 F3000                                                                   ; Wipe out 
          G1 E-2 Z{z} F1600                                                                ; Retract 2mm more & raise z by z hop amount 
          SAVE_GCODE_STATE NAME=ZLIFT                                                      ; save the current print position for resume, after z-hop
      {% else %}
          { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
          G1 E-2 F2700                                                                     ; Retract 2mm
          G1 X3 Y3 F3000                                                                   ; Wipe out 
          G1 E-2 F1600                                                                     ; Retract 2mm more
          SAVE_GCODE_STATE NAME=ZLIFT
      {% if %}
      G90
      G1 X{-3} Y100 F6000   ; park toolhead at the rear left of the bed
      SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save the parked position
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160                                    ; cool down hot to no-drip temp
      SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set idle timeout to 12 hours (in seconds)
  {% if %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
  {% if printer['pause_resume'].is_paused|int == 1 %}
      SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}   ; set timeout back to configured value
      {% if etemp > 0 %}
          SET_HEATER_TEMPERATURE HEATER=extruder TARGET={etemp|int}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={etemp|int - 4} MAXIMUM={etemp|int + 10}  ; wait for hot to heat back up to print temp
      {% if %}
      NZ_FULL_PURGE PURGE_LENGTH=20
      RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                      ; go back to park position in case toolhead was moved during pause                                                                        ; enable extruder stepper motor
      RESTORE_GCODE_STATE NAME=ZLIFT MOVE=1 MOVE_SPEED=60                           ; restore to the zlift position above the print
      G1 X-3 Y-3 F3000                                                              ; Undo the pause Wipe out 
      G1 Z{zhop * -1} F900  
      RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                           ; restore to the paused position (lowers to final print location)
      M400                                                                          ; wait for all moves to complete
      BASE_RESUME                                                                   ; resume print
  {% if %}

  
[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 5) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X10 Y{max_y-10} Z{max_z-20} F3600          ; park nozzle at rear
    m84
    TIMELAPSE_RENDER
    CHAMBER_FANS_OFF


# [gcode_macro CANCEL_PRINT]
# rename_existing: BASE_CANCEL_PRINT
# gcode:
#   SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
#   CLEAR_PAUSE
#   SDCARD_RESET_FILE
#   PRINT_END
#   BASE_CANCEL_PRINT

# [gcode_macro LOAD_FILAMENT]
# #need to know which filament to load???
# variable_load_distance:  100
# variable_purge_distance:  20
# gcode:
#   SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200
#   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={200-4} MAXIMUM={200+40}
#   {% set speed = params.SPEED|default(300) %}
#   {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
#   SAVE_GCODE_STATE NAME=load_state
#   G91
#   G92 E0
#   G1 E{load_distance} F{max_velocity}          ; fast-load
#   G1 E{purge_distance} F{speed}                ; purge
#   RESTORE_GCODE_STATE NAME=load_state

# [gcode_macro UNLOAD_FILAMENT]
# #need to figure out how to change the active toolhead
# variable_unload_distance:  100
# variable_purge_distance:  10
# gcode:
#   SET_HEATER_TEMPERATURE HEATER=extruder TARGET=210
#   TEMPERATURE_WAIT SENSOR=extruder MINIMUM={200-4} MAXIMUM={200+40}
#   {% set speed = params.SPEED|default(300) %}
#   {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 30 %}
#   SAVE_GCODE_STATE NAME=unload_state
#   G91
#   G92 E0
#   G1 E{purge_distance} F{speed}                ; purge
#   G1 E-{unload_distance} F{max_velocity}       ; fast-unload
#   RESTORE_GCODE_STATE NAME=unload_state